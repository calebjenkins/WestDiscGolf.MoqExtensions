on:
    push:
        branches:
            - 'develop'
        paths-ignore:
            - '**.md'
    workflow_dispatch:

jobs:
    build:
      runs-on: ubuntu-latest
      timeout-minutes: 15
  
      steps:
          - name: Checkout
            uses: actions/checkout@v3
            with:
                fetch-depth: 0
          
          - name: Setup .NET
            uses: actions/setup-dotnet@v3
            with:
                dotnet-version: '6.0.x'
  
          - name: Package Restore
            run: dotnet restore
  
          - name: Build
            run: dotnet build --configuration Release
  
          - name: Test
            #run: dotnet test --configuration Release --no-build
            run: dotnet test --configuration Release --no-build --filter 'FullyQualifiedName!~BDD_Specs'
  
            #- name: Run SpecFlow Tests
            #  uses: cryptic-wizard/run-specflow-tests@v1.3.1
            #  with:
            #     test-assembly-path: src/BDD/BDD_Specs/BDD_Specs/bin/Release/net6.0
            #     test-assembly-dll: BDD_Specs.dll
            #     output-html: BDD_SpecResults.html
            #     no-build: true
            #     upload-artifact: true

          - name: Echo Branch Name
            run: echo "Branch name is $GITHUB_REF_NAME "
            #if: ${{ github.ref == 'refs/heads/develop' }}

          - name: Get version
            id: get_version
            uses: greenygh0st/net-proj-release-version@v1
            with:
                # Filepath of the *.csproj file, relative to root of repository
                PROJ_FILE: src/MoqExtensions/MoqExtensions.csproj
        
            # env:
            #   RELEASE_VERSION: ${{ steps.get_version.outputs.RELEASE_VERSION }}

            
          - name: Show Release Version
            run: echo "Release Version is ${{steps.get_version.outputs.RELEASE_VERSION}}"

          - name: Set Release Version
            run: echo "getting version"
        
            env:
                RELEASE_VERSION: steps.get_version.outputs.RELEASE_VERSION

          #- name: Show Release Version
          #  run: echo "Release Version is ${{steps.get_version.outputs.RELEASE_VERSION}}"
    

          - name: Print new build number
            run: echo "Build number is $GITHUB_RUN_NUMBER "
   

          - name: Detect if workflow is running on origin/develop
            id: detect_develop
            run: git rev-parse HEAD | grep $(git rev-parse origin/develop)
            continue-on-error: true

          - name: Verify is based on origin/develop to ensure PRs are correctly targeted
            # List commits that are ahead of origin/Develop through HEAD and look for the tip of the current branch. 
            # If HEAD isn't ahead of origin/Develop, the git log bit will be empty and grep will fail
            run: git log origin/develop..HEAD | grep $(git rev-parse --short HEAD)
            if: ${{ steps.detect_develop.outcome == 'failure' }}

          - name: Pack
            run: dotnet pack --configuration Release /p:Version=${{steps.get_version.outputs.RELEASE_VERSION}}-ci-${GITHUB_RUN_NUMBER} --include-symbols  --output .
            if: ${{ steps.detect_develop.outcome == 'success' }}


          - name: Push to Nuget
            # if: ${{ steps.detect_develop.outcome == 'success' }}
            if: ${{ github.ref == 'refs/heads/develop' }}
            # run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.FAKEAUTH_NUGET_KEY}}
            # run: dotnet nuget push WestDiscGolf.MoqExtensions.${{steps.get_version.outputs.RELEASE_VERSION}}-ci-${GITHUB_RUN_NUMBER}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_KEY}}
            run: echo "feux-push to nuget"

 